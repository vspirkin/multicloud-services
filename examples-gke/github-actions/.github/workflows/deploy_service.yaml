# 💁 The Google Cloud CPE workflow will:
# - Parse inputs: service for deployment, namespace, helm-repo, command
# - Check for required secrets
# - Checkout your repository
# - Install gcloud cli and helm chart tools
# - Add helm repository
# - Perform GKE cluster login
# - Perform helm install/install/validate for service

# ℹ️ Configure your repository and the workflow with the following steps:
# 1. Have access to an GKE cluster. Refer to https://cloud.google.com/kubernetes-engine/docs/quickstart
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_SA_KEY with the Base64 encoded JSON service account key and IMAGE_REGISTRY_TOKEN (optional HELM_REGISTRY_TOKEN) repository secrets. Refer to:
#   - https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs
#   - https://docs.github.com/en/actions/reference/encrypted-secrets
#   - https://cli.github.com/manual/gh_secret_set
# 3. (Optional) Edit the top-level 'env' section as marked with '🖊️' if the defaults are not suitable for your project.
# 5. Commit and push the workflow file to your default branch. Manually trigger a workflow run.

# 📃 Considerations
# Pull secret should exist in coresponding namespace before workflow run
# Create it by:    
#     kubectl create secret docker-registry pullsecret \
#       --docker-server=$IMAGE_REGISTRY \
#       --docker-username=user --docker-password=token



name: Deploy service to GKE

env:
  # 🖊️ EDIT to change the helm registry settings.
  # Registries such as Jfrog, GHCR, Quay.io, and Docker Hub are supported.
  HELM_REGISTRY:            ${{ secrets.HELM_REGISTRY }}
  HELM_REGISTRY_USER:       ${{ secrets.HELM_REGISTRY_USER }}          
  HELM_REGISTRY_TOKEN:      ${{ secrets.HELM_REGISTRY_TOKEN }}
  IMAGE_REGISTRY:           ${{ secrets.IMAGE_REGISTRY }}


on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:
    inputs:
      service:
        type: choice
        description: service(s) for deployment
        required: true
        default: infra
        options:
        - infra
        - logging
        - monitoring
        - gauth
        - voice
        - tenant
        - gws
        - wwe        
        - webrtc
        - gvp
        - gsp
        - gim
        - gca
        - designer
        - ucsx
        - tlm
        - nexus
        - iwd
        - iwdem
        - iwddm
        - cxc
        - ges
        - pulse
        - bds
        - ixn
        - gcxi
      cluster:
        type: choice
        description: gcloud cluster
        required: true
        default: gke1-1
        options:
        - gke1-1
        - gke1-2

      namespace:
        # by default will use namespace equal to service name
        description: namespace (if not default)
        required: false
      helmrepo:
        description: helm repo name in HELM_REGISTRY
        required: true
        default: helm-stage
      command:
        description: command install|validate|uninstall
        required: true
        default: validate
        
jobs:
  gke-ci-cd:
    name: Deploy ${{ github.event.inputs.service }} (${{ github.event.inputs.command }}) to ${{ github.event.inputs.cluster }}

     # 🖊️ (Optional) EDIT if you want to run on your own runner
    runs-on: ubuntu-latest    

    steps:

    # 🖊️ EDIT your repository secrets to log into your Gcloud cluster and set up the context.
    # and define cluster name, zone and domain in the code below
    - name: Define cluster connection variables 
      run: |
        case ${{ github.event.inputs.cluster }} in

          gke1-1)
              echo "GKE_SA_KEY_NAME=GKE_SA_KEY"               >> $GITHUB_ENV
              echo "GKE_PROJECT_NAME=GKE_PROJECT"             >> $GITHUB_ENV
              echo "GKE_CLUSTER=gke1"                         >> $GITHUB_ENV
              echo "GKE_ZONE=us-west1"                        >> $GITHUB_ENV
              echo "DOMAIN=test.dev"                          >> $GITHUB_ENV
            ;;

          gke1-2)
              echo "GKE_SA_KEY_NAME=GKE_SA_KEY"               >> $GITHUB_ENV
              echo "GKE_PROJECT_NAME=GKE_PROJECT"             >> $GITHUB_ENV
              echo "GKE_CLUSTER=gke2"                         >> $GITHUB_ENV
              echo "GKE_ZONE=us-east1"                        >> $GITHUB_ENV
              echo "DOMAIN=test.staging"                      >> $GITHUB_ENV
            ;;

        esac


    - name: Check for required secrets
      uses: actions/github-script@v4
      with:
        script: |
          const secrets = {
            GKE_SA_KEY: `${{ secrets[env.GKE_SA_KEY_NAME] }}`,
            GKE_PROJECT: `${{ secrets[env.GKE_PROJECT_NAME] }}`,
            HELM_REGISTRY_TOKEN: `${{ secrets.HELM_REGISTRY_TOKEN }}`,
          };

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`✅ All the required secrets are set`);
          }


    - name: Check out repository
      uses: actions/checkout@v2


    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets[env.GKE_SA_KEY_NAME] }}
        project_id: ${{ secrets[env.GKE_PROJECT_NAME] }}


    - name: Install helm tool
      uses: azure/setup-helm@v1
      with:
        # 🖊️ (Optional) EDIT if you want to specify helm version (default: "latest")
        version: "v3.7.1"


    - name: Helm repo add
      run: |
        helm repo add --force-update helm_repo ${{ env.HELM_REGISTRY }}${{ github.event.inputs.helmrepo }} \
          --username ${{ env.HELM_REGISTRY_USER }} --password ${{ env.HELM_REGISTRY_TOKEN }}



    # Get the GKE credentials so we can deploy to the cluster
    # This action configures authentication to a GKE cluster via a kubeconfig file that can be used 
    # with kubectl or other methods of interacting with the cluster.
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets[env.GKE_SA_KEY_NAME] }}

    - name: Determine target namespace
      run: |
        NS=${{ github.event.inputs.namespace }}
        # By default (if namespace not defined) we install in namespace=service_name
        if [ -z "$NS" ] ; then
          NS=${{ github.event.inputs.service }}
          [[ $SV == "tenant" ]] && NS="voice"  # Tenant is exception, we deploy it in voice namespace by default
        fi
        echo "NS=$NS" >> $GITHUB_ENV

    - name: Create or use namespace
      run: |
        NS="${{ env.NS }}"
        if ! kubectl get namespace $NS; then
           echo "Namespace $NS does not exist. Creating it.."
           kubectl create namespace $NS
        else
           echo "Namespace $NS already exists. Will use it."
        fi
        kubectl config set-context --current --namespace=$NS


    - name: Custom script
      run: |
        export NS="${{ env.NS }}"
        export SERVICE=${{ github.event.inputs.service }}
        export DOMAIN=${{ env.DOMAIN }}
        export IMAGE_REGISTRY=${{ env.IMAGE_REGISTRY }}

        cd $SERVICE

        FULLCOMMAND="${{ github.event.inputs.command }}"
        COMMAND=$(echo $FULLCOMMAND | cut -d' ' -f1)
        if [[ "$FULLCOMMAND" == *" "* ]]; then
          CHART_NAME=$(echo $FULLCOMMAND | tr -s ' ' | cut -d' ' -f2)
          RL_NAME=$(echo $FULLCOMMAND | tr -s ' ' | cut -d' ' -f3)
        fi

        source .github/scripts/deployment.sh
